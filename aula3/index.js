import buildGraph from "./buildGraph.js";
import generateRandom from "./generateRandom.js";
import getPrimes from "./getPrimes.js";
import fs from 'fs';

const classParams = [
    {
        id: "firstRand",
        seed: 10,
        amount: 8000,
        a: 16807,
        c: 0,
        M: (Math.pow(2, 31) - 1)
    },
    {
        id: "1",
        seed: 10,
        amount: 8000,
        a: 45,
        c: 1,
        M: 1024
    },
    {
        id: "2",
        seed: 10,
        amount: 8000,
        a: 45,
        c: 0,
        M: 1024
    },
    {
        id: "3",
        seed: 10,
        amount: 8000,
        a: 383,
        c: 263,
        M: 1000
    },
    {
        id: "4",
        seed: 10,
        amount: 8000,
        a: 97,
        c: 0,
        M: Math.pow(2, 17)
    },
    {
        id: "5",
        seed: 10,
        amount: 8000,
        a: 48271,
        c: 0,
        M: (Math.pow(2, 31) - 1)
    },
    {
        id: "6",
        seed: 10,
        amount: 8000,
        a: 69621,
        c: 0,
        M: (Math.pow(2, 31) - 1)
    },
];

const myParams = [
    {
        "id": "5897",
        "seed": 10,
        "amount": 10000,
        "a": 5897,
        "c": 0,
        "M": 2147483647,
        "mean": 0.49996297127181216,
        "std": 0.2876104513676217,
        "covariance": 0.0016077052821497457,
        "counts": {
            "0-0.09": 783,
            "0.1-0.19": 804,
            "0.2-0.29": 792,
            "0.3-0.39": 838,
            "0.4-0.49": 785,
            "0.5-0.59": 846,
            "0.6-0.69": 773,
            "0.7-0.79": 774,
            "0.8-0.89": 820,
            "0.9-1": 785
        },
        "countsAsList": [
            783,
            804,
            792,
            838,
            785,
            846,
            773,
            774,
            820,
            785
        ],
        "chiSquare": 7.7299999999999995
    },
    {
        "id": "7019",
        "seed": 10,
        "amount": 10000,
        "a": 7019,
        "c": 0,
        "M": 2147483647,
        "mean": 0.4999764776594702,
        "std": 0.2881601761326656,
        "covariance": 0.00041727975700237485,
        "counts": {
            "0-0.09": 812,
            "0.1-0.19": 738,
            "0.2-0.29": 840,
            "0.3-0.39": 831,
            "0.4-0.49": 791,
            "0.5-0.59": 784,
            "0.6-0.69": 827,
            "0.7-0.79": 766,
            "0.8-0.89": 828,
            "0.9-1": 783
        },
        "countsAsList": [
            812,
            738,
            840,
            831,
            791,
            784,
            827,
            766,
            828,
            783
        ],
        "chiSquare": 12.305000000000001
    },
    {
        "id": "6553",
        "seed": 10,
        "amount": 10000,
        "a": 6553,
        "c": 0,
        "M": 2147483647,
        "mean": 0.4999790465117436,
        "std": 0.2883527272352713,
        "covariance": 0.00007339337748137917,
        "counts": {
            "0-0.09": 793,
            "0.1-0.19": 787,
            "0.2-0.29": 812,
            "0.3-0.39": 822,
            "0.4-0.49": 791,
            "0.5-0.59": 829,
            "0.6-0.69": 772,
            "0.7-0.79": 808,
            "0.8-0.89": 763,
            "0.9-1": 823
        },
        "countsAsList": [
            793,
            787,
            812,
            822,
            791,
            829,
            772,
            808,
            763,
            823
        ],
        "chiSquare": 5.6425
    },
    {
        "id": "5039",
        "seed": 10,
        "amount": 10000,
        "a": 5039,
        "c": 0,
        "M": 2147483647,
        "mean": 0.4999793861593861,
        "std": 0.28722678624456915,
        "covariance": -0.00045469926062781667,
        "counts": {
            "0-0.09": 787,
            "0.1-0.19": 809,
            "0.2-0.29": 748,
            "0.3-0.39": 860,
            "0.4-0.49": 793,
            "0.5-0.59": 830,
            "0.6-0.69": 824,
            "0.7-0.79": 768,
            "0.8-0.89": 787,
            "0.9-1": 794
        },
        "countsAsList": [
            787,
            809,
            748,
            860,
            793,
            830,
            824,
            768,
            787,
            794
        ],
        "chiSquare": 11.634999999999998
    },
    {
        "id": "7487",
        "seed": 10,
        "amount": 10000,
        "a": 7487,
        "c": 0,
        "M": 2147483647,
        "mean": 0.4999799761465318,
        "std": 0.2902420494765812,
        "covariance": -0.0008041768966137114,
        "counts": {
            "0-0.09": 785,
            "0.1-0.19": 832,
            "0.2-0.29": 812,
            "0.3-0.39": 788,
            "0.4-0.49": 777,
            "0.5-0.59": 792,
            "0.6-0.69": 809,
            "0.7-0.79": 790,
            "0.8-0.89": 784,
            "0.9-1": 831
        },
        "countsAsList": [
            785,
            832,
            812,
            788,
            777,
            792,
            809,
            790,
            784,
            831
        ],
        "chiSquare": 4.41
    },
    {
        "id": "6659",
        "seed": 10,
        "amount": 10000,
        "a": 6659,
        "c": 0,
        "M": 2147483647,
        "mean": 0.4999812383825106,
        "std": 0.290297130289916,
        "covariance": 0.001999342666674863,
        "counts": {
            "0-0.09": 825,
            "0.1-0.19": 788,
            "0.2-0.29": 807,
            "0.3-0.39": 797,
            "0.4-0.49": 761,
            "0.5-0.59": 799,
            "0.6-0.69": 810,
            "0.7-0.79": 797,
            "0.8-0.89": 788,
            "0.9-1": 828
        },
        "countsAsList": [
            825,
            788,
            807,
            797,
            761,
            799,
            810,
            797,
            788,
            828
        ],
        "chiSquare": 4.2325
    },
    {
        "id": "3623",
        "seed": 10,
        "amount": 10000,
        "a": 3623,
        "c": 0,
        "M": 2147483647,
        "mean": 0.49998186843794945,
        "std": 0.2890352662094005,
        "covariance": 0.0023711426775505956,
        "counts": {
            "0-0.09": 812,
            "0.1-0.19": 803,
            "0.2-0.29": 763,
            "0.3-0.39": 830,
            "0.4-0.49": 806,
            "0.5-0.59": 771,
            "0.6-0.69": 803,
            "0.7-0.79": 808,
            "0.8-0.89": 804,
            "0.9-1": 800
        },
        "countsAsList": [
            812,
            803,
            763,
            830,
            806,
            771,
            803,
            808,
            804,
            800
        ],
        "chiSquare": 4.234999999999999
    },
    {
        "id": "7481",
        "seed": 10,
        "amount": 10000,
        "a": 7481,
        "c": 0,
        "M": 2147483647,
        "mean": 0.49998908721131324,
        "std": 0.2885047689278219,
        "covariance": 0.0003261014530802878,
        "counts": {
            "0-0.09": 808,
            "0.1-0.19": 777,
            "0.2-0.29": 816,
            "0.3-0.39": 768,
            "0.4-0.49": 809,
            "0.5-0.59": 819,
            "0.6-0.69": 838,
            "0.7-0.79": 787,
            "0.8-0.89": 761,
            "0.9-1": 817
        },
        "countsAsList": [
            808,
            777,
            816,
            768,
            809,
            819,
            838,
            787,
            761,
            817
        ],
        "chiSquare": 7.172499999999999
    },
    {
        "id": "4091",
        "seed": 10,
        "amount": 10000,
        "a": 4091,
        "c": 0,
        "M": 2147483647,
        "mean": 0.5000048367996958,
        "std": 0.2907443554612324,
        "covariance": 0.00016952541656760142,
        "counts": {
            "0-0.09": 845,
            "0.1-0.19": 787,
            "0.2-0.29": 806,
            "0.3-0.39": 720,
            "0.4-0.49": 837,
            "0.5-0.59": 789,
            "0.6-0.69": 843,
            "0.7-0.79": 752,
            "0.8-0.89": 798,
            "0.9-1": 823
        },
        "countsAsList": [
            845,
            787,
            806,
            720,
            837,
            789,
            843,
            752,
            798,
            823
        ],
        "chiSquare": 18.507499999999997
    },
    {
        "id": "6971",
        "seed": 10,
        "amount": 10000,
        "a": 6971,
        "c": 0,
        "M": 2147483647,
        "mean": 0.5000071621281121,
        "std": 0.2882146602227593,
        "covariance": 0.002189380378857965,
        "counts": {
            "0-0.09": 821,
            "0.1-0.19": 742,
            "0.2-0.29": 792,
            "0.3-0.39": 837,
            "0.4-0.49": 800,
            "0.5-0.59": 819,
            "0.6-0.69": 812,
            "0.7-0.79": 766,
            "0.8-0.89": 812,
            "0.9-1": 799
        },
        "countsAsList": [
            821,
            742,
            792,
            837,
            800,
            819,
            812,
            766,
            812,
            799
        ],
        "chiSquare": 8.805
    },
    {
        "id": "1873",
        "seed": 10,
        "amount": 10000,
        "a": 1873,
        "c": 0,
        "M": 2147483647,
        "mean": 0.5000332470330319,
        "std": 0.2879534515932503,
        "covariance": 0.0006104444251862413,
        "counts": {
            "0-0.09": 775,
            "0.1-0.19": 813,
            "0.2-0.29": 819,
            "0.3-0.39": 796,
            "0.4-0.49": 793,
            "0.5-0.59": 803,
            "0.6-0.69": 815,
            "0.7-0.79": 787,
            "0.8-0.89": 818,
            "0.9-1": 781
        },
        "countsAsList": [
            775,
            813,
            819,
            796,
            793,
            803,
            815,
            787,
            818,
            781
        ],
        "chiSquare": 2.885
    },
    {
        "id": "1901",
        "seed": 10,
        "amount": 10000,
        "a": 1901,
        "c": 0,
        "M": 2147483647,
        "mean": 0.5000333512689255,
        "std": 0.2875820188215082,
        "covariance": 0.0002566202281264003,
        "counts": {
            "0-0.09": 794,
            "0.1-0.19": 807,
            "0.2-0.29": 821,
            "0.3-0.39": 747,
            "0.4-0.49": 798,
            "0.5-0.59": 801,
            "0.6-0.69": 869,
            "0.7-0.79": 801,
            "0.8-0.89": 782,
            "0.9-1": 780
        },
        "countsAsList": [
            794,
            807,
            821,
            747,
            798,
            801,
            869,
            801,
            782,
            780
        ],
        "chiSquare": 11.032499999999999
    },
    {
        "id": "6569",
        "seed": 10,
        "amount": 10000,
        "a": 6569,
        "c": 0,
        "M": 2147483647,
        "mean": 0.5000405642410242,
        "std": 0.2884292634650498,
        "covariance": 0.0011424137128671146,
        "counts": {
            "0-0.09": 780,
            "0.1-0.19": 776,
            "0.2-0.29": 869,
            "0.3-0.39": 832,
            "0.4-0.49": 761,
            "0.5-0.59": 753,
            "0.6-0.69": 827,
            "0.7-0.79": 799,
            "0.8-0.89": 790,
            "0.9-1": 813
        },
        "countsAsList": [
            780,
            776,
            869,
            832,
            761,
            753,
            827,
            799,
            790,
            813
        ],
        "chiSquare": 14.3625
    },
    {
        "id": "1093",
        "seed": 10,
        "amount": 10000,
        "a": 1093,
        "c": 0,
        "M": 2147483647,
        "mean": 0.5000473668844412,
        "std": 0.2898693461956997,
        "covariance": -0.0005422077446276854,
        "counts": {
            "0-0.09": 801,
            "0.1-0.19": 803,
            "0.2-0.29": 812,
            "0.3-0.39": 799,
            "0.4-0.49": 832,
            "0.5-0.59": 765,
            "0.6-0.69": 756,
            "0.7-0.79": 808,
            "0.8-0.89": 787,
            "0.9-1": 837
        },
        "countsAsList": [
            801,
            803,
            812,
            799,
            832,
            765,
            756,
            808,
            787,
            837
        ],
        "chiSquare": 7.427499999999999
    }
]

const randomWithGraph = async (params) => {
    const randomResults = [];

    for (let i = 0; i < params.length; i++) {
        try {
            const randomParam = params[i];
            const randomResult = generateRandom({ ...randomParam })
            console.log(`Generated the random for "${randomParam.id}"`)

            const result = { ...randomParam, ...randomResult }
            randomResults.push(result)

            await buildGraph({ Xs: randomResult.Xs, Ys: randomResult.Ys, filename: randomParam.id });
            console.log(`Generated the graph for "${randomParam.id}"`)
        } catch (error) {
            console.log(error)
        }
    }

    await Promise.resolve(fs.writeFile(`all.json`, JSON.stringify(randomResults, null, 4), 'utf-8', function (err) {
        if (err) {
            console.log(err);
        }
    }));

    console.log(`Finished!`)
    console.log(randomResults);
    return randomResults
}

const randomWithoutSave = async (params) => {
    const randomResults = [];

    for (let i = 0; i < params.length; i++) {
        console.log(`${i} of ${params.length}`)

        const randomParam = params[i];
        const randomResult = generateRandom({ ...randomParam })
        const result = { ...randomParam, ...randomResult }
        randomResults.push(result)
    }

    return randomResults
}

(async () => {
    // const res = await randomWithoutSave(myParams)
    // const smallMean = res.filter(result => Math.abs(0.5 - result.mean) < 0.00005)
    // console.log(smallMean)

    const res = await randomWithGraph(myParams)
    console.log("ok")
})()

